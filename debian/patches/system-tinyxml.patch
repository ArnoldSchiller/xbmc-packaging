Description: Patch to get xbmc building/running using system tinyxml.
Author: Andres Mejia <amejia@xbmc.org>
Forwarded: https://github.com/xbmc/xbmc/pull/619

--- a/Makefile.in
+++ b/Makefile.in
@@ -26,7 +26,6 @@
                    lib/libXDAAP/libxdaap.a \
                    lib/libhts/libhts.a \
                    lib/libsquish/libsquish.a \
-                   lib/tinyXML/tinyxml.a \
                    lib/xbmc-dll-symbols/dll-symbols.a \
                    xbmc/addons/addons.a \
                    xbmc/cdrip/cdrip.a \
@@ -304,7 +303,6 @@
 	lib/libXDAAP/libxdaap.a \
 	lib/SlingboxLib/SlingboxLib.a
 
-
 OBJSXBMC =$(DIRECTORY_ARCHIVES)
 OBJSXBMC+=lib/libapetag/.libs/libapetag.a
 
--- a/configure.in
+++ b/configure.in
@@ -749,6 +749,9 @@
 PKG_CHECK_MODULES([FREETYPE2],  [freetype2],
   [INCLUDES="$INCLUDES $FREETYPE2_CFLAGS"; LIBS="$LIBS $FREETYPE2_LIBS"],
   AC_MSG_ERROR($missing_library))
+PKG_CHECK_MODULES([TINYXML],   [tinyxml],
+  [INCLUDES="$INCLUDES $TINYXML_CFLAGS"; LIBS="$LIBS $TINYXML_LIBS"],
+  AC_MSG_ERROR($missing_library))
 
 # check for libbluray
 AS_CASE([x$use_libbluray],
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -1830,7 +1830,7 @@
         CStdString skinFile = URIUtils::GetFileName(items[i]->GetPath());
         if (skinFile.Left(6).CompareNoCase("custom") == 0)
         {
-          TiXmlDocument xmlDoc;
+          CXBMCTinyXML xmlDoc;
           if (!xmlDoc.LoadFile(items[i]->GetPath()))
           {
             CLog::Log(LOGERROR, "unable to load:%s, Line %d\n%s", items[i]->GetPath().c_str(), xmlDoc.ErrorRow(), xmlDoc.ErrorDesc());
--- a/xbmc/Favourites.cpp
+++ b/xbmc/Favourites.cpp
@@ -25,7 +25,7 @@
 #include "guilib/Key.h"
 #include "settings/Settings.h"
 #include "FileItem.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "utils/log.h"
 #include "utils/URIUtils.h"
 #include "settings/AdvancedSettings.h"
@@ -52,7 +52,7 @@
 
 bool CFavourites::LoadFavourites(CStdString& strPath, CFileItemList& items)
 {
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   if (!doc.LoadFile(strPath))
   {
     CLog::Log(LOGERROR, "Unable to load %s (row %i column %i)", strPath.c_str(), doc.Row(), doc.Column());
@@ -92,7 +92,7 @@
 bool CFavourites::Save(const CFileItemList &items)
 {
   CStdString favourites;
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   TiXmlElement xmlRootElement("favourites");
   TiXmlNode *rootNode = doc.InsertEndChild(xmlRootElement);
   if (!rootNode) return false;
--- a/xbmc/LangInfo.cpp
+++ b/xbmc/LangInfo.cpp
@@ -24,7 +24,7 @@
 #include "settings/GUISettings.h"
 #include "guilib/LocalizeStrings.h"
 #include "utils/log.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #ifdef _WIN32
 #include "utils/LangCodeExpander.h"
 #endif
@@ -201,7 +201,7 @@
 {
   SetDefaults();
 
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   if (!xmlDoc.LoadFile(strFileName))
   {
     CLog::Log(LOGERROR, "unable to load %s: %s at line %d", strFileName.c_str(), xmlDoc.ErrorDesc(), xmlDoc.ErrorRow());
--- a/xbmc/NfoFile.h
+++ b/xbmc/NfoFile.h
@@ -29,7 +29,7 @@
 #pragma once
 #endif // _MSC_VER > 1000
 
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "addons/Scraper.h"
 #include "utils/CharsetConverter.h"
 
@@ -53,7 +53,7 @@
   template<class T>
     bool GetDetails(T& details,const char* document=NULL, bool prioritise=false)
   {
-    TiXmlDocument doc;
+    CXBMCTinyXML doc;
     CStdString strDoc;
     if (document)
       strDoc = document;
--- a/xbmc/PasswordManager.cpp
+++ b/xbmc/PasswordManager.cpp
@@ -109,7 +109,7 @@
   CStdString passwordsFile = g_settings.GetUserDataItem("passwords.xml");
   if (XFILE::CFile::Exists(passwordsFile))
   {
-    TiXmlDocument doc;
+    CXBMCTinyXML doc;
     if (!doc.LoadFile(passwordsFile))
     {
       CLog::Log(LOGERROR, "%s - Unable to load: %s, Line %d\n%s", 
@@ -141,7 +141,7 @@
   if (!m_permanentCache.size())
     return;
 
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   TiXmlElement rootElement("passwords");
   TiXmlNode *root = doc.InsertEndChild(rootElement);
   if (!root)
--- a/xbmc/addons/Addon.cpp
+++ b/xbmc/addons/Addon.cpp
@@ -413,7 +413,7 @@
 bool CAddon::LoadUserSettings()
 {
   m_userSettingsLoaded = false;
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   if (doc.LoadFile(m_userSettingsPath))
     m_userSettingsLoaded = SettingsFromXML(doc);
   return m_userSettingsLoaded;
@@ -438,7 +438,7 @@
     CDirectory::Create(strAddon);
 
   // create the XML file
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   SettingsToXML(doc);
   doc.SaveFile(m_userSettingsPath);
   
@@ -463,7 +463,7 @@
   m_settings[key] = value;
 }
 
-bool CAddon::SettingsFromXML(const TiXmlDocument &doc, bool loadDefaults /*=false */)
+bool CAddon::SettingsFromXML(const CXBMCTinyXML &doc, bool loadDefaults /*=false */)
 {
   if (!doc.RootElement())
     return false;
@@ -495,7 +495,7 @@
   return foundSetting;
 }
 
-void CAddon::SettingsToXML(TiXmlDocument &doc) const
+void CAddon::SettingsToXML(CXBMCTinyXML &doc) const
 {
   TiXmlElement node("settings");
   doc.InsertEndChild(node);
--- a/xbmc/addons/Addon.h
+++ b/xbmc/addons/Addon.h
@@ -22,7 +22,7 @@
 
 #include "IAddon.h"
 #include "addons/AddonVersion.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "Util.h"
 #include "URL.h"
 #include "guilib/LocalizeStrings.h"
@@ -195,15 +195,15 @@
    \return true if settings are loaded, false otherwise
    \sa SettingsToXML
    */
-  bool SettingsFromXML(const TiXmlDocument &doc, bool loadDefaults = false);
+  bool SettingsFromXML(const CXBMCTinyXML &doc, bool loadDefaults = false);
 
   /*! \brief Parse settings into an XML document
    \param doc XML document to receive the settings
    \sa SettingsFromXML
    */
-  void SettingsToXML(TiXmlDocument &doc) const;
+  void SettingsToXML(CXBMCTinyXML &doc) const;
 
-  TiXmlDocument     m_addonXmlDoc;
+  CXBMCTinyXML      m_addonXmlDoc;
   CStdString        m_strLibName;
   bool              m_settingsLoaded;
   bool              m_userSettingsLoaded;
--- a/xbmc/addons/AddonInstaller.cpp
+++ b/xbmc/addons/AddonInstaller.cpp
@@ -283,7 +283,7 @@
   // TODO: possibly add support for github generated zips here?
   CStdString archive = URIUtils::AddFileToFolder(items[0]->GetPath(), "addon.xml");
 
-  TiXmlDocument xml;
+  CXBMCTinyXML xml;
   AddonPtr addon;
   if (xml.LoadFile(archive) && CAddonMgr::Get().LoadAddonDescriptionFromMemory(xml.RootElement(), addon))
   {
--- a/xbmc/addons/AddonManager.cpp
+++ b/xbmc/addons/AddonManager.cpp
@@ -30,9 +30,8 @@
 #include "settings/GUISettings.h"
 #include "settings/AdvancedSettings.h"
 #include "utils/log.h"
-#include "tinyXML/tinyxml.h"
-
-
+#include "utils/XBMCTinyXML.h"
+#include "dialogs/GUIDialogYesNo.h"
 #ifdef HAS_VISUALISATION
 #include "Visualisation.h"
 #endif
--- a/xbmc/addons/Repository.cpp
+++ b/xbmc/addons/Repository.cpp
@@ -20,7 +20,7 @@
  */
 
 #include "Repository.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "filesystem/File.h"
 #include "AddonDatabase.h"
 #include "settings/Settings.h"
@@ -130,7 +130,7 @@
   CSingleLock lock(m_critSection);
 
   VECADDONS result;
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
 
   CStdString file = m_info;
   if (m_compressed)
--- a/xbmc/addons/Scraper.cpp
+++ b/xbmc/addons/Scraper.cpp
@@ -182,7 +182,7 @@
   if (xml.IsEmpty())
     return true;
 
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   doc.Parse(xml.c_str());
   m_userSettingsLoaded = SettingsFromXML(doc);
 
@@ -195,7 +195,7 @@
     return "";
 
   stringstream stream;
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   SettingsToXML(doc);
   if (doc.RootElement())
     stream << *doc.RootElement();
@@ -254,7 +254,7 @@
   if (!XMLUtils::HasUTF8Declaration(strXML))
     g_charsetConverter.unknownToUTF8(strXML);
 
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   doc.Parse(strXML.c_str(),0,TIXML_ENCODING_UTF8);
   if (!doc.RootElement())
   {
@@ -364,7 +364,7 @@
 
       if (CAddonMgr::Get().GetAddon((*itr).first, dep))
       {
-        TiXmlDocument doc;
+        CXBMCTinyXML doc;
         if (dep->Type() == ADDON_SCRAPER_LIBRARY && doc.LoadFile(dep->LibPath()))
           m_parser.AddDocument(&doc);
       }
@@ -423,7 +423,7 @@
   // or <url>...</url> or <url>...</url><id>...</id> on success
   for (unsigned int i=0; i < vcsOut.size(); ++i)
   {
-    TiXmlDocument doc;
+    CXBMCTinyXML doc;
     doc.Parse(vcsOut[i], 0, TIXML_ENCODING_UTF8);
     CheckScraperError(doc.RootElement());
 
@@ -517,7 +517,7 @@
   bool fResults(false);
   for (CStdStringArray::const_iterator i = vcsOut.begin(); i != vcsOut.end(); ++i)
   {
-    TiXmlDocument doc;
+    CXBMCTinyXML doc;
     doc.Parse(*i, 0, TIXML_ENCODING_UTF8);
     if (!doc.RootElement())
     {
@@ -640,7 +640,7 @@
   // parse the returned XML into a vector of album objects
   for (CStdStringArray::const_iterator i = vcsOut.begin(); i != vcsOut.end(); ++i)
   {
-    TiXmlDocument doc;
+    CXBMCTinyXML doc;
     doc.Parse(*i, 0, TIXML_ENCODING_UTF8);
     TiXmlHandle xhDoc(&doc);
 
@@ -729,7 +729,7 @@
   // parse the returned XML into a vector of artist objects
   for (CStdStringArray::const_iterator i = vcsOut.begin(); i != vcsOut.end(); ++i)
   {
-    TiXmlDocument doc;
+    CXBMCTinyXML doc;
     doc.Parse(*i, 0, TIXML_ENCODING_UTF8);
     if (!doc.RootElement())
     {
@@ -784,7 +784,7 @@
   // parse the XML response
   for (CStdStringArray::const_iterator i = vcsOut.begin(); i != vcsOut.end(); ++i)
   {
-    TiXmlDocument doc;
+    CXBMCTinyXML doc;
     doc.Parse(*i);
     if (!doc.RootElement())
     {
@@ -865,7 +865,7 @@
   bool fRet(false);
   for (CStdStringArray::const_iterator i = vcsOut.begin(); i != vcsOut.end(); ++i)
   {
-    TiXmlDocument doc;
+    CXBMCTinyXML doc;
     doc.Parse(*i, 0, TIXML_ENCODING_UTF8);
     if (!doc.RootElement())
     {
@@ -900,7 +900,7 @@
   bool fRet(false);
   for (CStdStringArray::const_iterator i = vcsOut.begin(); i != vcsOut.end(); ++i)
   {
-    TiXmlDocument doc;
+    CXBMCTinyXML doc;
     doc.Parse(*i, 0, TIXML_ENCODING_UTF8);
     if (!doc.RootElement())
     {
@@ -936,7 +936,7 @@
   bool fRet(false);
   for (vector<CStdString>::const_iterator i = vcsOut.begin(); i != vcsOut.end(); ++i)
   {
-    TiXmlDocument doc;
+    CXBMCTinyXML doc;
     doc.Parse(*i, 0, TIXML_ENCODING_UTF8);
     if (!doc.RootElement())
     {
--- a/xbmc/cores/dvdplayer/DVDInputStreams/DVDStateSerializer.cpp
+++ b/xbmc/cores/dvdplayer/DVDInputStreams/DVDStateSerializer.cpp
@@ -27,8 +27,7 @@
 #endif
 
 #include "DllDvdNav.h"
-#include "tinyXML/tinyxml.h"
-
+#include "utils/XBMCTinyXML.h"
 #include "DVDStateSerializer.h"
 #include <sstream>
 
@@ -50,7 +49,7 @@
 bool CDVDStateSerializer::DVDToXMLState( std::string &xmlstate, const dvd_state_t *state )
 {
   char buffer[256];
-  TiXmlDocument xmlDoc("navstate");
+  CXBMCTinyXML xmlDoc("navstate");
 
   TiXmlElement eRoot("navstate");
   eRoot.SetAttribute("version", 1);
@@ -212,7 +211,7 @@
 
 bool CDVDStateSerializer::XMLToDVDState( dvd_state_t *state, const std::string &xmlstate )
 {
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
 
   xmlDoc.Parse(xmlstate.c_str());
 
--- a/xbmc/cores/dvdplayer/Edl.cpp
+++ b/xbmc/cores/dvdplayer/Edl.cpp
@@ -26,7 +26,7 @@
 #include "filesystem/MythFile.h"
 #include "settings/AdvancedSettings.h"
 #include "utils/log.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "PlatformDefs.h"
 
 extern "C"
@@ -504,7 +504,7 @@
   if (!CFile::Exists(beyondTVFilename))
     return false;
 
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   if (!xmlDoc.LoadFile(beyondTVFilename))
   {
     CLog::Log(LOGERROR, "%s - Could not load Beyond TV file: %s. %s", __FUNCTION__, beyondTVFilename.c_str(),
--- a/xbmc/cores/playercorefactory/PlayerCoreConfig.h
+++ b/xbmc/cores/playercorefactory/PlayerCoreConfig.h
@@ -20,7 +20,7 @@
  *
  */
 
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "cores/IPlayer.h"
 #include "PlayerCoreFactory.h"
 #include "cores/dvdplayer/DVDPlayer.h"
--- a/xbmc/cores/playercorefactory/PlayerSelectionRule.cpp
+++ b/xbmc/cores/playercorefactory/PlayerSelectionRule.cpp
@@ -26,7 +26,7 @@
 #include "settings/GUISettings.h"
 #include "utils/log.h"
 #include "utils/RegExp.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 
 CPlayerSelectionRule::CPlayerSelectionRule(TiXmlElement* pRule)
 {
--- a/xbmc/dialogs/GUIDialogPlayEject.cpp
+++ b/xbmc/dialogs/GUIDialogPlayEject.cpp
@@ -115,7 +115,7 @@
 
   // Figure out Line 2 of the dialog
   CStdString strLine2;
-  TiXmlDocument discStubXML;
+  CXBMCTinyXML discStubXML;
   if (discStubXML.LoadFile(item.GetPath()))
   {
     TiXmlElement * pRootElement = discStubXML.RootElement();
--- a/xbmc/filesystem/DAVDirectory.cpp
+++ b/xbmc/filesystem/DAVDirectory.cpp
@@ -197,7 +197,7 @@
   CStdString strResponse;
   dav.ReadData(strResponse);
 
-  TiXmlDocument davResponse;
+  CXBMCTinyXML davResponse;
   davResponse.Parse(strResponse.c_str());
 
   if (!davResponse.Parse(strResponse))
--- a/xbmc/filesystem/DAVDirectory.h
+++ b/xbmc/filesystem/DAVDirectory.h
@@ -21,7 +21,7 @@
  */
 
 #include "IDirectory.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "FileItem.h"
 
 namespace XFILE
--- a/xbmc/filesystem/DirectoryTuxBox.cpp
+++ b/xbmc/filesystem/DirectoryTuxBox.cpp
@@ -26,7 +26,7 @@
 #include "utils/HttpHeader.h"
 #include "utils/TuxBoxUtil.h"
 #include "URL.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "settings/AdvancedSettings.h"
 #include "FileItem.h"
 #include "utils/log.h"
@@ -131,7 +131,7 @@
       http.Close();
 
       // parse returned xml
-      TiXmlDocument doc;
+      CXBMCTinyXML doc;
       data.Replace("></",">-</"); //FILL EMPTY ELEMENTS WITH "-"!
       doc.Parse(data.c_str());
       TiXmlElement *root = doc.RootElement();
--- a/xbmc/filesystem/LastFMDirectory.h
+++ b/xbmc/filesystem/LastFMDirectory.h
@@ -22,7 +22,7 @@
 
 #include "IDirectory.h"
 #include "FileCurl.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "threads/Thread.h"
 
 class CGUIDialogProgress;
@@ -60,7 +60,7 @@
 
   bool m_Error;
   bool m_Downloaded;
-  TiXmlDocument m_xmlDoc;
+  CXBMCTinyXML m_xmlDoc;
 
   XFILE::CFileCurl m_http;
 
--- a/xbmc/filesystem/RSSDirectory.cpp
+++ b/xbmc/filesystem/RSSDirectory.cpp
@@ -24,7 +24,7 @@
 #include "FileCurl.h"
 #include "settings/Settings.h"
 #include "utils/URIUtils.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "utils/HTMLUtil.h"
 #include "utils/StringUtils.h"
 #include "video/VideoInfoTag.h"
@@ -601,7 +601,7 @@
   }
   lock.Leave();
 
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   if (!xmlDoc.LoadFile(strPath))
   {
     CLog::Log(LOGERROR,"failed to load xml from <%s>. error: <%d>", strPath.c_str(), xmlDoc.ErrorId());
--- a/xbmc/filesystem/RTVDirectory.cpp
+++ b/xbmc/filesystem/RTVDirectory.cpp
@@ -27,7 +27,7 @@
 #include "utils/URIUtils.h"
 #include "SectionLoader.h"
 #include "URL.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "FileItem.h"
 
 using namespace XFILE;
@@ -135,7 +135,7 @@
     rtv_get_guide_xml(&data, strHostAndPort.c_str());
 
     // Begin parsing the XML data
-    TiXmlDocument xmlDoc;
+    CXBMCTinyXML xmlDoc;
     xmlDoc.Parse( (const char *) data );
     if ( xmlDoc.Error() )
     {
--- a/xbmc/filesystem/Slingbox.cpp
+++ b/xbmc/filesystem/Slingbox.cpp
@@ -521,7 +521,7 @@
   }
 
   // Load the XML file
-  TiXmlDocument slingboxXML;
+  CXBMCTinyXML slingboxXML;
   if (!slingboxXML.LoadFile(slingboxXMLFile))
   {
     CLog::Log(LOGERROR, "%s - Error loading %s - line %d\n%s", __FUNCTION__, 
--- a/xbmc/guilib/GUIAudioManager.cpp
+++ b/xbmc/guilib/GUIAudioManager.cpp
@@ -29,7 +29,7 @@
 #include "input/ButtonTranslator.h"
 #include "threads/SingleLock.h"
 #include "utils/URIUtils.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "addons/Skin.h"
 #ifdef HAS_SDL_AUDIO
 #include <SDL/SDL_mixer.h>
@@ -312,7 +312,7 @@
   CStdString strSoundsXml = URIUtils::AddFileToFolder(m_strMediaDir, "sounds.xml");
 
   //  Load our xml file
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
 
   CLog::Log(LOGINFO, "Loading %s", strSoundsXml.c_str());
 
--- a/xbmc/guilib/GUIBaseContainer.cpp
+++ b/xbmc/guilib/GUIBaseContainer.cpp
@@ -30,7 +30,7 @@
 #include "GUIStaticItem.h"
 #include "Key.h"
 #include "utils/MathUtils.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 
 using namespace std;
 
--- a/xbmc/guilib/GUIColorManager.cpp
+++ b/xbmc/guilib/GUIColorManager.cpp
@@ -24,7 +24,7 @@
 #include "addons/Skin.h"
 #include "utils/log.h"
 #include "utils/URIUtils.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 
 CGUIColorManager g_colorManager;
 
@@ -48,7 +48,7 @@
   Clear();
 
   // load the global color map if it exists
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   if (xmlDoc.LoadFile(PTH_IC("special://xbmc/system/colors.xml")))
     LoadXML(xmlDoc);
 
@@ -71,7 +71,7 @@
     LoadXML(xmlDoc);
 }
 
-bool CGUIColorManager::LoadXML(TiXmlDocument &xmlDoc)
+bool CGUIColorManager::LoadXML(CXBMCTinyXML &xmlDoc)
 {
   TiXmlElement* pRootElement = xmlDoc.RootElement();
 
--- a/xbmc/guilib/GUIColorManager.h
+++ b/xbmc/guilib/GUIColorManager.h
@@ -38,7 +38,7 @@
 
 #include <map>
 
-class TiXmlDocument;
+class CXBMCTinyXML;
 
 typedef uint32_t color_t;
 
@@ -55,7 +55,7 @@
   void Clear();
 
 protected:
-  bool LoadXML(TiXmlDocument &xmlDoc);
+  bool LoadXML(CXBMCTinyXML &xmlDoc);
 
   std::map<CStdString, color_t> m_colors;
   typedef std::map<CStdString, color_t>::iterator iColor;
--- a/xbmc/guilib/GUIControlProfiler.cpp
+++ b/xbmc/guilib/GUIControlProfiler.cpp
@@ -20,7 +20,7 @@
  */
 
 #include "GUIControlProfiler.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "utils/TimeUtils.h"
 
 bool CGUIControlProfiler::m_bIsRunning = false;
@@ -340,7 +340,7 @@
   if (m_strOutputFile.IsEmpty())
     return false;
 
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   TiXmlDeclaration decl("1.0", "", "yes");
   doc.InsertEndChild(decl);
 
--- a/xbmc/guilib/GUIFontManager.cpp
+++ b/xbmc/guilib/GUIFontManager.cpp
@@ -339,7 +339,7 @@
 
 void GUIFontManager::LoadFonts(const CStdString& strFontSet)
 {
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   if (!OpenFontFile(xmlDoc))
     return;
 
@@ -454,7 +454,7 @@
   }
 }
 
-bool GUIFontManager::OpenFontFile(TiXmlDocument& xmlDoc)
+bool GUIFontManager::OpenFontFile(CXBMCTinyXML& xmlDoc)
 {
   // Get the file to load fonts from:
   CStdString strPath = g_SkinInfo->GetSkinPath("Font.xml", &m_skinResolution);
@@ -483,7 +483,7 @@
   strFontSet.Empty();
 
   // Load our font file
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   if (!OpenFontFile(xmlDoc))
     return false;
 
@@ -529,7 +529,7 @@
 
 bool GUIFontManager::IsFontSetUnicode(const CStdString& strFontSet)
 {
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   if (!OpenFontFile(xmlDoc))
     return false;
 
--- a/xbmc/guilib/GUIFontManager.h
+++ b/xbmc/guilib/GUIFontManager.h
@@ -35,7 +35,7 @@
 // Forward
 class CGUIFont;
 class CGUIFontTTFBase;
-class TiXmlDocument;
+class CXBMCTinyXML;
 class TiXmlNode;
 
 struct OrigFontInfo
@@ -84,7 +84,7 @@
   void ReloadTTFFonts();
   void LoadFonts(const TiXmlNode* fontNode);
   CGUIFontTTFBase* GetFontFile(const CStdString& strFontFile);
-  bool OpenFontFile(TiXmlDocument& xmlDoc);
+  bool OpenFontFile(CXBMCTinyXML& xmlDoc);
 
   std::vector<CGUIFont*> m_vecFonts;
   std::vector<CGUIFontTTFBase*> m_vecFontFiles;
--- a/xbmc/guilib/GUIIncludes.cpp
+++ b/xbmc/guilib/GUIIncludes.cpp
@@ -23,7 +23,7 @@
 #include "addons/Skin.h"
 #include "GUIInfoManager.h"
 #include "utils/log.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "utils/StringUtils.h"
 #include "interfaces/info/SkinVariable.h"
 
@@ -95,7 +95,7 @@
   if (HasIncludeFile(includeFile))
     return true;
 
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   if (!doc.LoadFile(includeFile))
   {
     CLog::Log(LOGINFO, "Error loading includes.xml file (%s): %s (row=%i, col=%i)", includeFile.c_str(), doc.ErrorDesc(), doc.ErrorRow(), doc.ErrorCol());
@@ -260,12 +260,12 @@
   TiXmlAttribute *attribute = node->FirstAttribute();
   while (attribute)
   { // check the attribute against our set
-    if (m_constantAttributes.count(attribute->NameStr()))
+    if (m_constantAttributes.count(attribute->Name()))
       attribute->SetValue(ResolveConstant(attribute->ValueStr()));
     attribute = attribute->Next();
   }
   // also do the value
-  if (node->FirstChild() && node->FirstChild()->Type() == TiXmlNode::TEXT && m_constantNodes.count(node->ValueStr()))
+  if (node->FirstChild() && node->FirstChild()->Type() == TiXmlNode::TINYXML_TEXT && m_constantNodes.count(node->ValueStr()))
     node->FirstChild()->SetValue(ResolveConstant(node->FirstChild()->ValueStr()));
 }
 
--- a/xbmc/guilib/GUIListItemLayout.cpp
+++ b/xbmc/guilib/GUIListItemLayout.cpp
@@ -25,7 +25,7 @@
 #include "GUIInfoManager.h"
 #include "GUIListLabel.h"
 #include "GUIImage.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 
 using namespace std;
 
--- a/xbmc/guilib/GUITextBox.cpp
+++ b/xbmc/guilib/GUITextBox.cpp
@@ -22,7 +22,7 @@
 #include "GUITextBox.h"
 #include "utils/CharsetConverter.h"
 #include "GUIInfoManager.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "utils/MathUtils.h"
 
 using namespace std;
--- a/xbmc/guilib/GUIWindow.cpp
+++ b/xbmc/guilib/GUIWindow.cpp
@@ -114,7 +114,7 @@
 
 bool CGUIWindow::LoadXML(const CStdString &strPath, const CStdString &strLowerPath)
 {
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   if ( !xmlDoc.LoadFile(strPath) && !xmlDoc.LoadFile(CStdString(strPath).ToLower()) && !xmlDoc.LoadFile(strLowerPath))
   {
     CLog::Log(LOGERROR, "unable to load:%s, Line %d\n%s", strPath.c_str(), xmlDoc.ErrorRow(), xmlDoc.ErrorDesc());
@@ -125,7 +125,7 @@
   return Load(xmlDoc);
 }
 
-bool CGUIWindow::Load(TiXmlDocument &xmlDoc)
+bool CGUIWindow::Load(CXBMCTinyXML &xmlDoc)
 {
   TiXmlElement* pRootElement = xmlDoc.RootElement();
   if (strcmpi(pRootElement->Value(), "window"))
--- a/xbmc/guilib/GUIWindow.h
+++ b/xbmc/guilib/GUIWindow.h
@@ -55,7 +55,7 @@
 // forward
 class TiXmlNode;
 class TiXmlElement;
-class TiXmlDocument;
+class CXBMCTinyXML;
 class CVariant;
 
 class COrigin
@@ -194,7 +194,7 @@
 protected:
   virtual EVENT_RESULT OnMouseEvent(const CPoint &point, const CMouseEvent &event);
   virtual bool LoadXML(const CStdString& strPath, const CStdString &strLowerPath);  ///< Loads from the given file
-  bool Load(TiXmlDocument &xmlDoc);                 ///< Loads from the given XML document
+  bool Load(CXBMCTinyXML &xmlDoc);                 ///< Loads from the given XML document
   virtual void LoadAdditionalTags(TiXmlElement *root) {}; ///< Load additional information from the XML document
 
   virtual void SetDefaults();
--- a/xbmc/guilib/LocalizeStrings.cpp
+++ b/xbmc/guilib/LocalizeStrings.cpp
@@ -72,7 +72,7 @@
 
 bool CLocalizeStrings::LoadXML(const CStdString &filename, CStdString &encoding, uint32_t offset /* = 0 */)
 {
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   if (!xmlDoc.LoadFile(PTH_IC(filename)))
   {
     CLog::Log(LOGDEBUG, "unable to load %s: %s at line %d", filename.c_str(), xmlDoc.ErrorDesc(), xmlDoc.ErrorRow());
--- a/xbmc/guilib/Makefile.in
+++ b/xbmc/guilib/Makefile.in
@@ -97,6 +97,6 @@
 -include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
 
 try : try.o TextureBundle.o DirectXGraphics.o GUIFontTTF.o
-	g++ -o try try.o TextureBundle.o DirectXGraphics.o GraphicContext.o GUIIncludes.o ../utils/CriticalSection.o ../XBVideoConfig.o SkinInfo.o ../../lib/tinyXML/tinyxml.a ../linux/CriticalSection.o GUIFontTTF.o GUIFontBase.o GUIFontManager.o GUIFont.o ../utils/XMLUtils.o GUIImage.o GUIControl.o TextureManager.o GUIMessage.o ../utils/SingleLock.o VisibleEffect.o GUIWindowManager.o AnimatedGif.o -lSDL_image -lSDL_gfx -lSDL -llzo -lfreetype
+	g++ -o try try.o TextureBundle.o DirectXGraphics.o GraphicContext.o GUIIncludes.o ../utils/CriticalSection.o ../XBVideoConfig.o SkinInfo.o ../linux/CriticalSection.o GUIFontTTF.o GUIFontBase.o GUIFontManager.o GUIFont.o ../utils/XMLUtils.o GUIImage.o GUIControl.o TextureManager.o GUIMessage.o ../utils/SingleLock.o VisibleEffect.o GUIWindowManager.o AnimatedGif.o -lSDL_image -lSDL_gfx -lSDL -llzo -lfreetype
 
 
--- a/xbmc/guilib/VisibleEffect.cpp
+++ b/xbmc/guilib/VisibleEffect.cpp
@@ -25,7 +25,7 @@
 #include "addons/Skin.h" // for the effect time adjustments
 #include "utils/StringUtils.h"
 #include "Tween.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 
 using namespace std;
 
--- a/xbmc/input/ButtonTranslator.cpp
+++ b/xbmc/input/ButtonTranslator.cpp
@@ -32,7 +32,7 @@
 #include "FileItem.h"
 #include "utils/StringUtils.h"
 #include "utils/log.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "XBIRRemote.h"
 
 using namespace std;
@@ -503,7 +503,7 @@
 
 bool CButtonTranslator::LoadKeymap(const CStdString &keymapPath)
 {
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
 
   CLog::Log(LOGINFO, "Loading %s", keymapPath.c_str());
   if (!xmlDoc.LoadFile(keymapPath))
@@ -522,7 +522,7 @@
   TiXmlNode* pWindow = pRoot->FirstChild();
   while (pWindow)
   {
-    if (pWindow->Type() == TiXmlNode::ELEMENT)
+    if (pWindow->Type() == TiXmlNode::TINYXML_ELEMENT)
     {
       int windowID = WINDOW_INVALID;
       const char *szWindow = pWindow->Value();
@@ -550,7 +550,7 @@
 #define REMOTEMAPTAG "irssmap"
 #endif
   // load our xml file, and fill up our mapping tables
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
 
   // Load the config file
   CLog::Log(LOGINFO, "Loading %s", lircmapPath.c_str());
@@ -572,7 +572,7 @@
   TiXmlNode* pRemote = pRoot->FirstChild();
   while (pRemote)
   {
-    if (pRemote->Type() == TiXmlNode::ELEMENT)
+    if (pRemote->Type() == TiXmlNode::TINYXML_ELEMENT)
     {
       const char *szRemote = pRemote->Value();
       if (szRemote)
--- a/xbmc/input/KeyboardLayoutConfiguration.cpp
+++ b/xbmc/input/KeyboardLayoutConfiguration.cpp
@@ -21,7 +21,7 @@
 
 #include "KeyboardLayoutConfiguration.h"
 #include "utils/CharsetConverter.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 
 using namespace std;
 CKeyboardLayoutConfiguration g_keyboardLayoutConfiguration;
@@ -50,7 +50,7 @@
 {
   SetDefaults();
 
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   if (!xmlDoc.LoadFile(strFileName))
   {
     CLog::Log(LOGINFO, "unable to load %s: %s at line %d", strFileName.c_str(), xmlDoc.ErrorDesc(), xmlDoc.ErrorRow());
--- a/xbmc/interfaces/http-api/XBMCConfiguration.h
+++ b/xbmc/interfaces/http-api/XBMCConfiguration.h
@@ -3,7 +3,7 @@
 #undef min
 #undef max
 #include <algorithm>
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 
 typedef char char_t;
 typedef struct websRec *webs_t;
@@ -26,7 +26,7 @@
 	int		Load();
 	bool	IsValidOption(char* option);
 
-	TiXmlDocument	xbmcCfg;
+	CXBMCTinyXML	xbmcCfg;
 	bool	xbmcCfgLoaded;
 };
 
--- a/xbmc/interfaces/info/SkinVariable.cpp
+++ b/xbmc/interfaces/info/SkinVariable.cpp
@@ -21,7 +21,7 @@
 
 #include "SkinVariable.h"
 #include "GUIInfoManager.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 
 using namespace std;
 using namespace INFO;
--- a/xbmc/interfaces/python/xbmcmodule/GUIPythonWindowXML.cpp
+++ b/xbmc/interfaces/python/xbmcmodule/GUIPythonWindowXML.cpp
@@ -33,7 +33,7 @@
 #include "settings/GUISettings.h"
 #include "guilib/LocalizeStrings.h"
 #include "utils/log.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 
 using namespace std;
 
@@ -346,7 +346,7 @@
   }
   delete[] buffer;
 
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   xmlDoc.Parse(xml.c_str());
 
   if (xmlDoc.Error())
--- a/xbmc/interfaces/python/xbmcmodule/control.cpp
+++ b/xbmc/interfaces/python/xbmcmodule/control.cpp
@@ -25,7 +25,7 @@
 #include "guilib/GUIControlFactory.h"
 #include "guilib/GUITexture.h"
 #include "utils/StringUtils.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 
 using namespace std;
 
@@ -242,7 +242,7 @@
       return NULL;
     }
 
-    TiXmlDocument xmlDoc;
+    CXBMCTinyXML xmlDoc;
     TiXmlElement xmlRootElement("control");
     TiXmlNode *pRoot = xmlDoc.InsertEndChild(xmlRootElement);
     if (!pRoot)
--- a/xbmc/interfaces/python/xbmcmodule/pyutil.cpp
+++ b/xbmc/interfaces/python/xbmcmodule/pyutil.cpp
@@ -25,7 +25,7 @@
 #include <vector>
 #include "addons/Skin.h"
 #include "utils/log.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "utils/CharsetConverter.h"
 #include "threads/CriticalSection.h"
 #include "threads/SingleLock.h"
@@ -33,7 +33,7 @@
 
 using namespace std;
 
-static TiXmlDocument pySkinReferences;
+static CXBMCTinyXML pySkinReferences;
 
 
 namespace PYXBMC
--- a/xbmc/music/Album.cpp
+++ b/xbmc/music/Album.cpp
@@ -143,7 +143,7 @@
   XMLUtils::SetString(album,        "type", strType);
   if (!thumbURL.m_xml.empty())
   {
-    TiXmlDocument doc;
+    CXBMCTinyXML doc;
     doc.Parse(thumbURL.m_xml);
     const TiXmlNode* thumb = doc.FirstChild("thumb");
     while (thumb)
--- a/xbmc/music/Artist.cpp
+++ b/xbmc/music/Artist.cpp
@@ -130,7 +130,7 @@
   XMLUtils::SetString(artist,   "disbanded", strDisbanded);
   if (!thumbURL.m_xml.empty())
   {
-    TiXmlDocument doc;
+    CXBMCTinyXML doc;
     doc.Parse(thumbURL.m_xml);
     const TiXmlNode* thumb = doc.FirstChild("thumb");
     while (thumb)
@@ -142,7 +142,7 @@
   XMLUtils::SetString(artist,        "path", strPath);
   if (fanart.m_xml.size())
   {
-    TiXmlDocument doc;
+    CXBMCTinyXML doc;
     doc.Parse(fanart.m_xml);
     artist->InsertEndChild(*doc.RootElement());
   }
--- a/xbmc/music/LastFmManager.cpp
+++ b/xbmc/music/LastFmManager.cpp
@@ -47,7 +47,7 @@
 #include "settings/Settings.h"
 #include "utils/StringUtils.h"
 #include "guilib/LocalizeStrings.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "utils/TimeUtils.h"
 #include "threads/SingleLock.h"
 #include "utils/log.h"
@@ -285,7 +285,7 @@
   //CLog::Log(LOGDEBUG, "RequestRadioTracks: %s", html.c_str());
 
   //parse playlist
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
 
   xmlDoc.Parse(html);
   if (xmlDoc.Error())
@@ -712,7 +712,7 @@
   CreateMD5Hash(strAuth, strAuth);
 
   //create request xml
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   TiXmlDeclaration * decl = new TiXmlDeclaration( "1.0", "UTF-8", "" );
   doc.LinkEndChild( decl );
 
--- a/xbmc/music/MusicDatabase.cpp
+++ b/xbmc/music/MusicDatabase.cpp
@@ -4137,7 +4137,7 @@
     int current = 0;
 
     // create our xml document
-    TiXmlDocument xmlDoc;
+    CXBMCTinyXML xmlDoc;
     TiXmlDeclaration decl("1.0", "UTF-8", "yes");
     xmlDoc.InsertEndChild(decl);
     TiXmlNode *pMain = NULL;
@@ -4291,7 +4291,7 @@
     if (NULL == m_pDB.get()) return;
     if (NULL == m_pDS.get()) return;
 
-    TiXmlDocument xmlDoc;
+    CXBMCTinyXML xmlDoc;
     if (!xmlDoc.LoadFile(xmlFile))
       return;
 
--- a/xbmc/music/infoscanner/MusicAlbumInfo.h
+++ b/xbmc/music/infoscanner/MusicAlbumInfo.h
@@ -26,7 +26,7 @@
 #include "addons/Scraper.h"
 #include "utils/ScraperUrl.h"
 
-class TiXmlDocument;
+class CXBMCTinyXML;
 
 namespace XFILE { class CFileCurl; }
 
--- a/xbmc/music/infoscanner/MusicArtistInfo.h
+++ b/xbmc/music/infoscanner/MusicArtistInfo.h
@@ -25,7 +25,7 @@
 #include "music/Artist.h"
 #include "addons/Scraper.h"
 
-class TiXmlDocument;
+class CXBMCTinyXML;
 class CScraperUrl;
 
 namespace MUSIC_GRABBER
--- a/xbmc/network/libscrobbler/scrobbler.cpp
+++ b/xbmc/network/libscrobbler/scrobbler.cpp
@@ -277,7 +277,7 @@
 {
   int                     journalVersion  = 0;
   SubmissionJournalEntry  entry;
-  TiXmlDocument           xmlDoc;
+  CXBMCTinyXML            xmlDoc;
   CStdString              JournalFileName = GetJournalFileName();
   CSingleLock             lock(m_queueLock);
 
@@ -355,7 +355,7 @@
     return true;
   }
   CStdString        strJournalVersion;
-  TiXmlDocument     xmlDoc;
+  CXBMCTinyXML      xmlDoc;
   TiXmlDeclaration  decl("1.0", "utf-8", "yes");
   TiXmlElement      xmlRootElement("asjournal");
   xmlDoc.InsertEndChild(decl);
--- a/xbmc/peripherals/Peripherals.cpp
+++ b/xbmc/peripherals/Peripherals.cpp
@@ -37,7 +37,7 @@
 #include "utils/log.h"
 #include "utils/XMLUtils.h"
 #include "settings/GUISettings.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "filesystem/Directory.h"
 #include "guilib/GUIWindowManager.h"
 #include "guilib/LocalizeStrings.h"
@@ -390,7 +390,7 @@
 
 bool CPeripherals::LoadMappings(void)
 {
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   if (!xmlDoc.LoadFile("special://xbmc/system/peripherals.xml"))
   {
     CLog::Log(LOGWARNING, "%s - peripherals.xml does not exist", __FUNCTION__);
--- a/xbmc/peripherals/devices/Peripheral.cpp
+++ b/xbmc/peripherals/devices/Peripheral.cpp
@@ -24,7 +24,7 @@
 #include "utils/log.h"
 #include "utils/StringUtils.h"
 #include "settings/GUISettings.h"
-#include "lib/tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "utils/URIUtils.h"
 
 using namespace PERIPHERALS;
@@ -387,7 +387,7 @@
 
 void CPeripheral::PersistSettings(bool bExiting /* = false */)
 {
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   TiXmlElement node("settings");
   doc.InsertEndChild(node);
   for (map<CStdString, CSetting *>::const_iterator itr = m_settings.begin(); itr != m_settings.end(); itr++)
@@ -444,7 +444,7 @@
 
 void CPeripheral::LoadPersistedSettings(void)
 {
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   if (doc.LoadFile(m_strSettingsFile))
   {
     const TiXmlElement *setting = doc.RootElement()->FirstChildElement("setting");
--- a/xbmc/playlists/PlayListB4S.cpp
+++ b/xbmc/playlists/PlayListB4S.cpp
@@ -21,7 +21,7 @@
 
 #include "PlayListB4S.h"
 #include "Util.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "settings/AdvancedSettings.h"
 #include "music/tags/MusicInfoTag.h"
 #include "filesystem/File.h"
@@ -57,7 +57,7 @@
 
 bool CPlayListB4S::LoadData(istream& stream)
 {
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
 
   stream >> xmlDoc;
 
--- a/xbmc/playlists/PlayListPLS.cpp
+++ b/xbmc/playlists/PlayListPLS.cpp
@@ -29,7 +29,7 @@
 #include "utils/CharsetConverter.h"
 #include "utils/log.h"
 #include "utils/URIUtils.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 
 using namespace std;
 using namespace XFILE;
@@ -293,7 +293,7 @@
   }
   else
   {
-    TiXmlDocument xmlDoc;
+    CXBMCTinyXML xmlDoc;
     stream >> xmlDoc;
 
     if (xmlDoc.Error())
@@ -316,7 +316,7 @@
       pChild = pNode->IterateChildren(pChild);
       if(pChild)
       {
-        if (pChild->Type() == TiXmlNode::ELEMENT)
+        if (pChild->Type() == TiXmlNode::TINYXML_ELEMENT)
         {
           value = pChild->Value();
           value.ToLower();
--- a/xbmc/playlists/PlayListWPL.cpp
+++ b/xbmc/playlists/PlayListWPL.cpp
@@ -21,7 +21,7 @@
 
 #include "PlayListWPL.h"
 #include "Util.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "settings/AdvancedSettings.h"
 #include "filesystem/File.h"
 #include "utils/log.h"
@@ -59,7 +59,7 @@
 
 bool CPlayListWPL::LoadData(istream& stream)
 {
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
 
   stream >> xmlDoc;
   if (xmlDoc.Error())
--- a/xbmc/playlists/PlayListXML.cpp
+++ b/xbmc/playlists/PlayListXML.cpp
@@ -85,7 +85,7 @@
 
 bool CPlayListXML::Load( const CStdString& strFileName )
 {
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
 
   m_strPlayListName = URIUtils::GetFileName(strFileName);
   URIUtils::GetParentPath(strFileName, m_strBasePath);
--- a/xbmc/playlists/SmartPlayList.cpp
+++ b/xbmc/playlists/SmartPlayList.cpp
@@ -851,7 +851,7 @@
 
 bool CSmartPlaylist::Save(const CStdString &path)
 {
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   TiXmlDeclaration decl("1.0", "UTF-8", "yes");
   doc.InsertEndChild(decl);
 
--- a/xbmc/playlists/SmartPlayList.h
+++ b/xbmc/playlists/SmartPlayList.h
@@ -21,7 +21,7 @@
  */
 
 #include "utils/StdString.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include <vector>
 #include <set>
 
@@ -195,6 +195,6 @@
   CSmartPlaylistRule::DATABASE_FIELD m_orderField;
   bool m_orderAscending;
 
-  TiXmlDocument m_xmlDoc;
+  CXBMCTinyXML m_xmlDoc;
 };
 
--- a/xbmc/programs/Shortcut.cpp
+++ b/xbmc/programs/Shortcut.cpp
@@ -24,7 +24,7 @@
 
 #include "Shortcut.h"
 #include "Util.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "filesystem/File.h"
 
 using namespace XFILE;
@@ -43,7 +43,7 @@
 
 bool CShortcut::Create(const CStdString& szPath)
 {
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   if ( !xmlDoc.LoadFile( szPath ) )
     return FALSE;
 
@@ -132,7 +132,7 @@
   // <shortcut>
   //   <path>F:\App\default.xbe</path>
   // </shortcut>
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   TiXmlElement xmlRootElement("shortcut");
   TiXmlNode *pRootNode = xmlDoc.InsertEndChild(xmlRootElement);
   if (!pRootNode) return false;
--- a/xbmc/settings/AdvancedSettings.cpp
+++ b/xbmc/settings/AdvancedSettings.cpp
@@ -307,7 +307,7 @@
 
 void CAdvancedSettings::ParseSettingsFile(const CStdString &file)
 {
-  TiXmlDocument advancedXML;
+  CXBMCTinyXML advancedXML;
   if (!CFile::Exists(file))
   {
     CLog::Log(LOGNOTICE, "No settings file to load (%s)", file.c_str());
--- a/xbmc/settings/GUISettings.cpp
+++ b/xbmc/settings/GUISettings.cpp
@@ -34,7 +34,7 @@
 #include "utils/StringUtils.h"
 #include "utils/SystemInfo.h"
 #include "utils/log.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "windowing/WindowingFactory.h"
 #include "powermanagement/PowerManager.h"
 #include "cores/dvdplayer/DVDCodecs/Video/CrystalHD.h"
--- a/xbmc/settings/GUIWindowSettingsCategory.cpp
+++ b/xbmc/settings/GUIWindowSettingsCategory.cpp
@@ -2043,7 +2043,7 @@
 
   CStdString strPath = g_SkinInfo->GetSkinPath("Font.xml");
 
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   if (!xmlDoc.LoadFile(strPath))
   {
     CLog::Log(LOGERROR, "Couldn't load %s", strPath.c_str());
--- a/xbmc/settings/Settings.cpp
+++ b/xbmc/settings/Settings.cpp
@@ -578,7 +578,7 @@
 bool CSettings::LoadSettings(const CStdString& strSettingsFile)
 {
   // load the xml file
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
 
   if (!xmlDoc.LoadFile(strSettingsFile))
   {
@@ -773,7 +773,7 @@
     return false;
   }
 
-  TiXmlDocument playerCoreFactoryXML;
+  CXBMCTinyXML playerCoreFactoryXML;
   if (!playerCoreFactoryXML.LoadFile(fileStr))
   {
     CLog::Log(LOGERROR, "Error loading %s, Line %d (%s)", fileStr.c_str(), playerCoreFactoryXML.ErrorRow(), playerCoreFactoryXML.ErrorDesc());
@@ -785,7 +785,7 @@
 
 bool CSettings::SaveSettings(const CStdString& strSettingsFile, CGUISettings *localSettings /* = NULL */) const
 {
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   TiXmlElement xmlRootElement("settings");
   TiXmlNode *pRoot = xmlDoc.InsertEndChild(xmlRootElement);
   if (!pRoot) return false;
@@ -962,7 +962,7 @@
 
     if (m_currentProfile != 0)
     {
-      TiXmlDocument doc;
+      CXBMCTinyXML doc;
       if (doc.LoadFile(URIUtils::AddFileToFolder(GetUserDataFolder(),"guisettings.xml")))
         g_guiSettings.LoadMasterLock(doc.RootElement());
     }
@@ -1037,7 +1037,7 @@
   // clear out our profiles
   m_vecProfiles.clear();
 
-  TiXmlDocument profilesDoc;
+  CXBMCTinyXML profilesDoc;
   if (CFile::Exists(profilesFile))
   {
     if (profilesDoc.LoadFile(profilesFile))
@@ -1089,7 +1089,7 @@
 
 bool CSettings::SaveProfiles(const CStdString& profilesFile) const
 {
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   TiXmlElement xmlRootElement("profiles");
   TiXmlNode *pRoot = xmlDoc.InsertEndChild(xmlRootElement);
   if (!pRoot) return false;
@@ -1105,7 +1105,7 @@
 
 bool CSettings::LoadUPnPXml(const CStdString& strSettingsFile)
 {
-  TiXmlDocument UPnPDoc;
+  CXBMCTinyXML UPnPDoc;
 
   if (!CFile::Exists(strSettingsFile))
   { // set defaults, or assume no rss feeds??
@@ -1141,7 +1141,7 @@
 
 bool CSettings::SaveUPnPXml(const CStdString& strSettingsFile) const
 {
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   TiXmlElement xmlRootElement("upnpserver");
   TiXmlNode *pRoot = xmlDoc.InsertEndChild(xmlRootElement);
   if (!pRoot) return false;
@@ -1281,7 +1281,7 @@
 bool CSettings::SaveSources()
 {
   // TODO: Should we be specifying utf8 here??
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   TiXmlElement xmlRootElement("sources");
   TiXmlNode *pRoot = doc.InsertEndChild(xmlRootElement);
   if (!pRoot) return false;
@@ -1343,7 +1343,7 @@
   CLog::Log(LOGNOTICE, "Loading media sources from %s", strSourcesFile.c_str());
 
   // load xml file
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   TiXmlElement *pRootElement = NULL;
   if (xmlDoc.LoadFile(strSourcesFile))
   {
@@ -1770,7 +1770,7 @@
 {
   CStdString rssXML;
   rssXML = GetUserDataItem("RssFeeds.xml");
-  TiXmlDocument rssDoc;
+  CXBMCTinyXML rssDoc;
   if (!CFile::Exists(rssXML))
   { // set defaults, or assume no rss feeds??
     return;
--- a/xbmc/storage/MediaManager.cpp
+++ b/xbmc/storage/MediaManager.cpp
@@ -40,7 +40,7 @@
 #include "Autorun.h"
 #include "GUIUserMessages.h"
 #include "settings/Settings.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "threads/SingleLock.h"
 #include "utils/log.h"
 #include "dialogs/GUIDialogKaiToast.h"
@@ -104,7 +104,7 @@
   m_locations.clear();
 
   // load xml file...
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   if ( !xmlDoc.LoadFile( MEDIA_SOURCES_XML ) )
     return false;
 
@@ -137,7 +137,7 @@
 
 bool CMediaManager::SaveSources()
 {
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   TiXmlElement xmlRootElement("mediasources");
   TiXmlNode *pRoot = xmlDoc.InsertEndChild(xmlRootElement);
   if (!pRoot) return false;
--- a/xbmc/utils/Fanart.cpp
+++ b/xbmc/utils/Fanart.cpp
@@ -20,7 +20,7 @@
  */
 
 #include "Fanart.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "URIUtils.h"
 #include "pictures/Picture.h"
 #include "filesystem/FileCurl.h"
@@ -59,7 +59,7 @@
 
 bool CFanart::Unpack()
 {
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   doc.Parse(m_xml.c_str());
 
   m_fanart.clear();
--- a/xbmc/utils/LCD.cpp
+++ b/xbmc/utils/LCD.cpp
@@ -406,7 +406,7 @@
 
   bool condensed = TiXmlBase::IsWhiteSpaceCondensed();
   TiXmlBase::SetCondenseWhiteSpace(false);
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   if (!doc.LoadFile(xmlFile.c_str()))
   {
     CLog::Log(LOGERROR, "Unable to load LCD skin file %s", xmlFile.c_str());
--- a/xbmc/utils/LCD.h
+++ b/xbmc/utils/LCD.h
@@ -22,7 +22,7 @@
  */
 
 #include "threads/Thread.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "guilib/GUILabelControl.h"  // for CInfoPortion
 
 class TiXmlNode;
--- a/xbmc/utils/LangCodeExpander.cpp
+++ b/xbmc/utils/LangCodeExpander.cpp
@@ -21,7 +21,7 @@
 
 #include "LangCodeExpander.h"
 #include "SectionLoader.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "utils/log.h" 
 
 #define MAKECODE(a, b, c, d)  ((((long)(a))<<24) | (((long)(b))<<16) | (((long)(c))<<8) | (long)(d))
--- a/xbmc/utils/Makefile
+++ b/xbmc/utils/Makefile
@@ -56,6 +56,7 @@
      Variant.cpp \
      Weather.cpp \
      Win32Exception.cpp \
+     XBMCTinyXML.cpp \
      XMLUtils.cpp \
 
 LIB=utils.a
--- a/xbmc/utils/RssReader.h
+++ b/xbmc/utils/RssReader.h
@@ -37,7 +37,7 @@
 #include <vector>
 #include <list>
 
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 
 #define RSS_COLOR_BODY  0
 #define RSS_COLOR_HEADLINE 1
@@ -83,7 +83,7 @@
   std::vector<SYSTEMTIME *> m_vecTimeStamps;
   std::vector<int> m_vecUpdateTimes;
   int m_spacesBetweenFeeds;
-  TiXmlDocument m_xml;
+  CXBMCTinyXML m_xml;
   std::list<CStdString> m_tagSet;
   std::vector<std::string> m_vecUrls;
   std::vector<int> m_vecQueue;
--- a/xbmc/utils/ScraperParser.cpp
+++ b/xbmc/utils/ScraperParser.cpp
@@ -59,7 +59,7 @@
     if (parser.m_document)
     {
       m_scraper = parser.m_scraper;
-      m_document = new TiXmlDocument(*parser.m_document);
+      m_document = new CXBMCTinyXML(*parser.m_document);
       LoadFromXML();
     }
   }
@@ -84,7 +84,7 @@
 {
   Clear();
 
-  m_document = new TiXmlDocument(strXMLFile);
+  m_document = new CXBMCTinyXML(strXMLFile);
 
   if (!m_document)
     return false;
@@ -549,7 +549,7 @@
   }
 }
 
-void CScraperParser::AddDocument(const TiXmlDocument* doc)
+void CScraperParser::AddDocument(const CXBMCTinyXML* doc)
 {
   const TiXmlNode* node = doc->RootElement()->FirstChild();
   while (node)
--- a/xbmc/utils/ScraperParser.h
+++ b/xbmc/utils/ScraperParser.h
@@ -34,7 +34,7 @@
 }
 
 class TiXmlElement;
-class TiXmlDocument;
+class CXBMCTinyXML;
 
 class CScraperSettings;
 
@@ -54,7 +54,7 @@
   const CStdString Parse(const CStdString& strTag,
                          ADDON::CScraper* scraper);
 
-  void AddDocument(const TiXmlDocument* doc);
+  void AddDocument(const CXBMCTinyXML* doc);
 
   CStdString m_param[MAX_SCRAPER_BUFFERS];
 
@@ -73,7 +73,7 @@
   void GetBufferParams(bool* result, const char* attribute, bool defvalue);
   void InsertToken(CStdString& strOutput, int buf, const char* token);
 
-  TiXmlDocument* m_document;
+  CXBMCTinyXML* m_document;
   TiXmlElement* m_pRootElement;
 
   const char* m_SearchStringEncoding;
--- a/xbmc/utils/ScraperUrl.cpp
+++ b/xbmc/utils/ScraperUrl.cpp
@@ -124,7 +124,7 @@
   if (!XMLUtils::HasUTF8Declaration(strUrl))
     g_charsetConverter.unknownToUTF8(strUrl);
 
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   doc.Parse(strUrl.c_str(),0,TIXML_ENCODING_UTF8);
 
   TiXmlElement* pElement = doc.RootElement();
@@ -293,7 +293,7 @@
   if (!XMLUtils::HasUTF8Declaration(strUrls))
     g_charsetConverter.unknownToUTF8(strUrls);
 
-  TiXmlDocument doc;
+  CXBMCTinyXML doc;
   doc.Parse(strUrls.c_str(),0,TIXML_ENCODING_UTF8);
   if (doc.RootElement())
   {
--- a/xbmc/utils/TuxBoxUtil.cpp
+++ b/xbmc/utils/TuxBoxUtil.cpp
@@ -39,7 +39,7 @@
 #include "FileItem.h"
 #include "guilib/LocalizeStrings.h"
 #include "StringUtils.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "log.h"
 
 using namespace XFILE;
@@ -745,7 +745,7 @@
       }
 
       // parse returned xml
-      TiXmlDocument doc;
+      CXBMCTinyXML doc;
       TiXmlElement *XMLRoot=NULL;
       strTmp.Replace("></",">-</"); //FILL EMPTY ELEMENTS WITH "-"!
       doc.Parse(strTmp.c_str());
@@ -1482,7 +1482,7 @@
     piconPath = "special://xbmc/userdata/PictureIcon/Picon/";
     defaultPng = piconPath+"tuxbox.png";
     piconXML = "special://xbmc/userdata/PictureIcon/picon.xml";
-    TiXmlDocument piconDoc;
+    CXBMCTinyXML piconDoc;
 
     if (!CFile::Exists(piconXML))
       return defaultPng;
--- a/xbmc/utils/Weather.cpp
+++ b/xbmc/utils/Weather.cpp
@@ -231,7 +231,7 @@
   // We load the english strings in to get our tokens
   CStdString strLanguagePath = "special://xbmc/language/English/strings.xml";
 
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   if (!xmlDoc.LoadFile(strLanguagePath) || !xmlDoc.RootElement())
   {
     CLog::Log(LOGERROR, "Weather: unable to load %s: %s at line %d", strLanguagePath.c_str(), xmlDoc.ErrorDesc(), xmlDoc.ErrorRow());
--- /dev/null
+++ b/xbmc/utils/XBMCTinyXML.cpp
@@ -0,0 +1,164 @@
+/*
+ *      Copyright (C) 2005-2011 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "XBMCTinyXML.h"
+#include "filesystem/File.h"
+#include "RegExp.h"
+
+#define MAX_ENTITY_LENGTH 6 // size of largest entity "&apos;"
+#define BUFFER_SIZE 4096
+
+CXBMCTinyXML::CXBMCTinyXML()
+: TiXmlDocument::TiXmlDocument()
+{
+}
+
+CXBMCTinyXML::CXBMCTinyXML(const char *documentName)
+: TiXmlDocument::TiXmlDocument()
+{
+  LoadFile(documentName);
+}
+
+CXBMCTinyXML::CXBMCTinyXML(const CStdString &documentName)
+: TiXmlDocument::TiXmlDocument()
+{
+  LoadFile(documentName);
+}
+
+bool CXBMCTinyXML::LoadFile(TiXmlEncoding encoding)
+{
+  return TiXmlDocument::LoadFile(encoding);
+}
+
+bool CXBMCTinyXML::LoadFile(const char *_filename, TiXmlEncoding encoding)
+{
+  CStdString filename(_filename);
+  return LoadFile(filename, encoding);
+}
+
+bool CXBMCTinyXML::LoadFile(const CStdString &_filename, TiXmlEncoding encoding)
+{
+  // There was a really terrifying little bug here. The code:
+  //    value = filename
+  // in the STL case, cause the assignment method of the std::string to
+  // be called. What is strange, is that the std::string had the same
+  // address as it's c_str() method, and so bad things happen. Looks
+  // like a bug in the Microsoft STL implementation.
+  // Add an extra string to avoid the crash.
+  CStdString filename(_filename);
+  value = filename;
+
+  XFILE::CFileStream file;
+  if (!file.Open(value))
+  {
+    SetError(TIXML_ERROR_OPENING_FILE, NULL, NULL, TIXML_ENCODING_UNKNOWN);
+    return false;
+  }
+
+  // Delete the existing data:
+  Clear();
+  location.Clear();
+
+  CStdString data;
+  data.reserve(8 * 1000);
+  StreamIn(&file, &data);
+  file.Close();
+
+  Parse(data, NULL, encoding);
+
+  if (Error())
+    return false;
+  return true;
+}
+
+bool CXBMCTinyXML::LoadFile(FILE *f, TiXmlEncoding encoding)
+{
+  CStdString data("");
+  char buf[BUFFER_SIZE];
+  int result, count = 0;
+  while ((result = fread(buf, 1, BUFFER_SIZE, f)) > 0)
+  {
+    data.reserve(BUFFER_SIZE * (++count));
+    data.append(buf);
+  }
+  return Parse(data, NULL, encoding);
+}
+
+bool CXBMCTinyXML::SaveFile(const char *_filename) const
+{
+  CStdString filename(_filename);
+  return SaveFile(filename);
+}
+
+bool CXBMCTinyXML::SaveFile(const CStdString &filename) const
+{
+  XFILE::CFile file;
+  if (file.OpenForWrite(filename, true))
+  {
+    TiXmlPrinter printer;
+    Accept(&printer);
+    file.Write(printer.CStr(), printer.Size());
+    return true;
+  }
+  return false;
+}
+
+const char *CXBMCTinyXML::Parse(const char *_data, TiXmlParsingData *prevData, TiXmlEncoding encoding)
+{
+  CStdString data(_data);
+  return Parse(data, prevData, encoding);
+}
+
+const char *CXBMCTinyXML::Parse(CStdString &data, TiXmlParsingData *prevData, TiXmlEncoding encoding)
+{
+  // Preprocess string, replacing '&' with '&amp; for invalid XML entities
+  size_t pos = 0;
+  CRegExp re(true);
+  re.RegComp("^&(amp|lt|gt|quot|apos);.*");
+  while ((pos = data.find("&", pos)) != CStdString::npos)
+  {
+    CStdString tmp = data.substr(pos, pos + MAX_ENTITY_LENGTH);
+    if (re.RegFind(tmp) < 0)
+      data.insert(pos + 1, "amp;");
+    pos++;
+  }
+  return TiXmlDocument::Parse(data.c_str(), prevData, encoding);
+}
+
+bool CXBMCTinyXML::Test()
+{
+  // scraper results with unescaped &
+  CXBMCTinyXML doc;
+  CStdString data("<details><url function=\"ParseTMDBRating\" "
+                  "cache=\"tmdb-en-12244.json\">"
+                  "http://api.themoviedb.org/3/movie/12244"
+                  "?api_key=57983e31fb435df4df77afb854740ea9"
+                  "&language=en</url></details>");
+  doc.Parse(data.c_str());
+  TiXmlNode *root = doc.RootElement();
+  if (root && root->ValueStr() == "details")
+  {
+    TiXmlElement *url = root->FirstChildElement("url");
+    if (url && url->FirstChild())
+    {
+      return (url->FirstChild()->ValueStr() == "http://api.themoviedb.org/3/movie/12244?api_key=57983e31fb435df4df77afb854740ea9&language=en");
+    }
+  }
+  return false;
+}
--- /dev/null
+++ b/xbmc/utils/XBMCTinyXML.h
@@ -0,0 +1,52 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2005-2011 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#if (defined HAVE_CONFIG_H) && (!defined WIN32)
+  #include "config.h"
+#endif
+#ifdef TARGET_WINDOWS
+#define TIXML_USE_STL
+#ifdef _DEBUG
+#pragma comment(lib, "tinyxmlSTLd.lib")
+#else
+#pragma comment(lib, "tinyxmlSTL.lib")
+#endif
+#endif
+#include <tinyxml.h>
+
+#include "StdString.h"
+
+class CXBMCTinyXML : public TiXmlDocument
+{
+public:
+  CXBMCTinyXML();
+  CXBMCTinyXML(const char*);
+  CXBMCTinyXML(const CStdString&);
+  bool LoadFile(TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING);
+  bool LoadFile(const char*, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING);
+  bool LoadFile(const CStdString&, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING);
+  bool LoadFile(FILE*, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING);
+  bool SaveFile(const char*) const;
+  bool SaveFile(const CStdString&) const;
+  const char *Parse(const char*, TiXmlParsingData *prevData = NULL, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING);
+  const char *Parse(CStdString&, TiXmlParsingData *prevData = NULL, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING);
+  static bool Test();
+};
--- a/xbmc/utils/XMLUtils.cpp
+++ b/xbmc/utils/XMLUtils.cpp
@@ -162,10 +162,10 @@
   Returns true if the encoding of the document is other then UTF-8.
   /param strEncoding Returns the encoding of the document. Empty if UTF-8
 */
-bool XMLUtils::GetEncoding(const TiXmlDocument* pDoc, CStdString& strEncoding)
+bool XMLUtils::GetEncoding(const CXBMCTinyXML* pDoc, CStdString& strEncoding)
 {
   const TiXmlNode* pNode=NULL;
-  while ((pNode=pDoc->IterateChildren(pNode)) && pNode->Type()!=TiXmlNode::DECLARATION) {}
+  while ((pNode=pDoc->IterateChildren(pNode)) && pNode->Type()!=TiXmlNode::TINYXML_DECLARATION) {}
   if (!pNode) return false;
   const TiXmlDeclaration* pDecl=pNode->ToDeclaration();
   if (!pDecl) return false;
--- a/xbmc/utils/XMLUtils.h
+++ b/xbmc/utils/XMLUtils.h
@@ -22,8 +22,7 @@
  */
 
 #include "utils/StdString.h"
-#include "tinyXML/tinyxml.h" // no use forwarding these, as this class is the main workhorse anyway,
-                             // thus it simplifies the include patterns
+#include "utils/XBMCTinyXML.h"
 
 class XMLUtils
 {
@@ -53,7 +52,7 @@
    \param clear       if true, clears the string prior to adding tags, if tags are available. Defaults to false.
    */
   static bool GetAdditiveString(const TiXmlNode* rootNode, const char* tag, const CStdString& separator, CStdString& value, bool clear = false);
-  static bool GetEncoding(const TiXmlDocument* pDoc, CStdString& strEncoding);
+  static bool GetEncoding(const CXBMCTinyXML* pDoc, CStdString& strEncoding);
   static bool GetPath(const TiXmlNode* pRootNode, const char* strTag, CStdString& strStringValue);
   static bool GetFloat(const TiXmlNode* pRootNode, const char* strTag, float& value, const float min, const float max);
   static bool GetInt(const TiXmlNode* pRootNode, const char* strTag, int& iIntValue, const int min, const int max);
--- a/xbmc/video/VideoDatabase.cpp
+++ b/xbmc/video/VideoDatabase.cpp
@@ -6940,7 +6940,7 @@
     int current = 0;
 
     // create our xml document
-    TiXmlDocument xmlDoc;
+    CXBMCTinyXML xmlDoc;
     TiXmlDeclaration decl("1.0", "UTF-8", "yes");
     xmlDoc.InsertEndChild(decl);
     TiXmlNode *pMain = NULL;
@@ -7472,7 +7472,7 @@
     if (NULL == m_pDB.get()) return;
     if (NULL == m_pDS.get()) return;
 
-    TiXmlDocument xmlDoc;
+    CXBMCTinyXML xmlDoc;
     if (!xmlDoc.LoadFile(URIUtils::AddFileToFolder(path, "videodb.xml")))
       return;
 
--- a/xbmc/video/VideoInfoDownloader.h
+++ b/xbmc/video/VideoInfoDownloader.h
@@ -29,7 +29,7 @@
 #include "filesystem/FileCurl.h"
 
 // forward declarations
-class TiXmlDocument;
+class CXBMCTinyXML;
 class CGUIDialogProgress;
 
 namespace ADDON
--- a/xbmc/video/VideoInfoTag.cpp
+++ b/xbmc/video/VideoInfoTag.cpp
@@ -131,7 +131,7 @@
   XMLUtils::SetString(movie, "runtime", m_strRuntime);
   if (!m_strPictureURL.m_xml.empty())
   {
-    TiXmlDocument doc;
+    CXBMCTinyXML doc;
     doc.Parse(m_strPictureURL.m_xml);
     const TiXmlNode* thumb = doc.FirstChild("thumb");
     while (thumb)
@@ -142,7 +142,7 @@
   }
   if (m_fanart.m_xml.size())
   {
-    TiXmlDocument doc;
+    CXBMCTinyXML doc;
     doc.Parse(m_fanart.m_xml);
     movie->InsertEndChild(*doc.RootElement());
   }
@@ -158,7 +158,7 @@
   }
   if (!m_strEpisodeGuide.IsEmpty())
   {
-    TiXmlDocument doc;
+    CXBMCTinyXML doc;
     doc.Parse(m_strEpisodeGuide);
     if (doc.RootElement())
       movie->InsertEndChild(*doc.RootElement());
--- a/xbmc/windowing/X11/XRandR.cpp
+++ b/xbmc/windowing/X11/XRandR.cpp
@@ -27,7 +27,7 @@
 #include <sys/wait.h>
 #include "system.h"
 #include "PlatformInclude.h"
-#include "tinyXML/tinyxml.h"
+#include "utils/XBMCTinyXML.h"
 #include "../xbmc/utils/log.h"
 
 using namespace std;
@@ -65,7 +65,7 @@
   }
 
 
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
   if (!xmlDoc.LoadFile(file, TIXML_DEFAULT_ENCODING))
   {
     CLog::Log(LOGERROR, "CXRandR::Query - unable to open xrandr xml");
@@ -292,7 +292,7 @@
 void CXRandR::LoadCustomModeLinesToAllOutputs(void)
 {
   Query();
-  TiXmlDocument xmlDoc;
+  CXBMCTinyXML xmlDoc;
 
   if (!xmlDoc.LoadFile("special://xbmc/userdata/ModeLines.xml"))
   {
